@startuml K8s_Wiring_Component
skinparam componentStyle rectangle
skinparam dpi 150
title Kubernetes Wiring: Ingress ⇢ Service ⇢ Pods + ConfigMap/Secrets + Egress

actor Client

cloud "Internet" as Internet
node "Kubernetes Cluster" as K8s {
  package "namespace: default" as ns {
    component "Ingress: app-ingress\n(host: app.example.com)" as IngressRes
    node "Ingress Controller (nginx)" as IngressCtrl

    component "Service: app-svc\nport: 80 -> targetPort: http" as Svc
    component "Deployment: app" as Deploy
    folder "Pod[1..N]\nlabels:\n  app.k8s.io/name=app\n  app.k8s.io/instance=app\nports:\n  http:8080" as Pods

    component "ConfigMap: app-config" as CM
    component "Secret: app-secrets" as SEC
    component "TLS Secret: app-tls\n(tls.crt, tls.key)" as TLS

    component "NetworkPolicy: app-egress" as NP
    queue "EndpointSlice(s)" as EPS
  }
  database "DNS (Cluster DNS)" as ClusterDNS
}

cloud "External API\n(api.example.com:443)" as ExternalAPI

' Wiring
Client -down-> IngressCtrl : HTTPS\n(app.example.com)
IngressCtrl --> Svc : routes per Ingress rules

IngressRes ..> IngressCtrl : controller watches Ingress\nand configures routes

Svc --> EPS : selects Pods by labels\ncreates endpoints
EPS --> Pods : forwards to Ready Pods\non targetPort http (8080)

CM ..down.> Pods : envFrom / mounted files
SEC ..down.> Pods : envFrom / mounted files
TLS ..> IngressCtrl : TLS termination

' Egress via NetworkPolicy
Pods ..> ClusterDNS : UDP/TCP 53\n(allowed by NP)
Pods ..> ExternalAPI : TCP 443\n(allowed by NP)
NP ..> Pods : restricts egress

' Notes
note right of Svc
  Service selector must match
  Pod labels exactly.
  Ingress points to Service
  name + Service 'port' (80),
  not containerPort.
end note

note bottom of Pods
  Readiness must be true for Pod
  to be in EndpointSlice.
end note

@enduml

newpage

@startuml K8s_Wiring_Sequence
title HTTP request flow (TLS terminated at Ingress)

actor Client
participant "Ingress Controller (nginx)" as IC
participant "Service: app-svc" as SVC
participant "EndpointSlice(s)" as EPS
participant "Pod (containerPort:8080)" as POD

Client -> IC : TLS ClientHello/HTTP GET https://app.example.com/
activate IC
IC -> IC : Terminate TLS with app-tls\nRoute by host/path -> service: app-svc:80
IC -> SVC : TCP 80 (ClusterIP)
activate SVC
SVC -> EPS : pick Ready endpoints
EPS -> POD : choose Pod IP:8080
SVC --> POD : TCP 8080 (targetPort)
activate POD
POD --> SVC : HTTP 200
deactivate POD
SVC --> IC : HTTP 200
deactivate SVC
IC --> Client : HTTPS 200
deactivate IC

@enduml
